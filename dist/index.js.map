{"version":3,"file":"index.js","mappings":";;;;;;AAAA;;;;;;;;AAAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":[".././node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack/bootstrap","../webpack/runtime/compat",".././index.js"],"sourcesContent":[null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require(\"@actions/core\");\r\nconst github = require(\"@actions/github\");\r\n\r\n// Funci√≥n para generar release notes autom√°ticas\r\nfunction generateReleaseNotes(pullRequest, commits, files) {\r\n  const features = [];\r\n  const fixes = [];\r\n  const chores = [];\r\n  const others = [];\r\n  \r\n  // Analizar commits por tipo\r\n  commits.forEach(commit => {\r\n    const message = commit.commit.message.toLowerCase();\r\n    const fullMessage = commit.commit.message;\r\n    \r\n    if (message.startsWith('feat:') || message.startsWith('feature:')) {\r\n      features.push(fullMessage.replace(/^(feat:|feature:)\\s*/i, ''));\r\n    } else if (message.startsWith('fix:') || message.startsWith('bug:')) {\r\n      fixes.push(fullMessage.replace(/^(fix:|bug:)\\s*/i, ''));\r\n    } else if (message.startsWith('chore:') || message.startsWith('docs:') || message.startsWith('style:')) {\r\n      chores.push(fullMessage.replace(/^(chore:|docs:|style:)\\s*/i, ''));\r\n    } else {\r\n      others.push(fullMessage);\r\n    }\r\n  });\r\n\r\n  // Analizar archivos modificados\r\n  const addedFiles = files.filter(f => f.status === 'added').map(f => f.filename);\r\n  const modifiedFiles = files.filter(f => f.status === 'modified').map(f => f.filename);\r\n  const deletedFiles = files.filter(f => f.status === 'removed').map(f => f.filename);\r\n\r\n  // Generar release notes\r\n  let releaseNotes = `# Release Notes\\n\\n`;\r\n  \r\n  // Informaci√≥n del PR\r\n  if (pullRequest.title) {\r\n    releaseNotes += `## ${pullRequest.title}\\n\\n`;\r\n  }\r\n  \r\n  if (pullRequest.body && pullRequest.body.trim()) {\r\n    releaseNotes += `${pullRequest.body}\\n\\n`;\r\n  }\r\n\r\n  // Nuevas caracter√≠sticas\r\n  if (features.length > 0) {\r\n    releaseNotes += `## üöÄ Nuevas Caracter√≠sticas\\n\\n`;\r\n    features.forEach(feature => {\r\n      releaseNotes += `- ${feature}\\n`;\r\n    });\r\n    releaseNotes += `\\n`;\r\n  }\r\n\r\n  // Correcciones\r\n  if (fixes.length > 0) {\r\n    releaseNotes += `## üêõ Correcciones\\n\\n`;\r\n    fixes.forEach(fix => {\r\n      releaseNotes += `- ${fix}\\n`;\r\n    });\r\n    releaseNotes += `\\n`;\r\n  }\r\n\r\n  // Otros cambios\r\n  if (others.length > 0) {\r\n    releaseNotes += `## üìù Otros Cambios\\n\\n`;\r\n    others.forEach(change => {\r\n      releaseNotes += `- ${change}\\n`;\r\n    });\r\n    releaseNotes += `\\n`;\r\n  }\r\n\r\n  // Tareas de mantenimiento\r\n  if (chores.length > 0) {\r\n    releaseNotes += `## üîß Mantenimiento\\n\\n`;\r\n    chores.forEach(chore => {\r\n      releaseNotes += `- ${chore}\\n`;\r\n    });\r\n    releaseNotes += `\\n`;\r\n  }\r\n\r\n  // Archivos modificados\r\n  if (addedFiles.length > 0 || modifiedFiles.length > 0 || deletedFiles.length > 0) {\r\n    releaseNotes += `## üìÅ Archivos Afectados\\n\\n`;\r\n    \r\n    if (addedFiles.length > 0) {\r\n      releaseNotes += `### ‚úÖ Archivos Agregados\\n`;\r\n      addedFiles.forEach(file => {\r\n        releaseNotes += `- \\`${file}\\`\\n`;\r\n      });\r\n      releaseNotes += `\\n`;\r\n    }\r\n    \r\n    if (modifiedFiles.length > 0) {\r\n      releaseNotes += `### üìù Archivos Modificados\\n`;\r\n      modifiedFiles.forEach(file => {\r\n        releaseNotes += `- \\`${file}\\`\\n`;\r\n      });\r\n      releaseNotes += `\\n`;\r\n    }\r\n    \r\n    if (deletedFiles.length > 0) {\r\n      releaseNotes += `### ‚ùå Archivos Eliminados\\n`;\r\n      deletedFiles.forEach(file => {\r\n        releaseNotes += `- \\`${file}\\`\\n`;\r\n      });\r\n      releaseNotes += `\\n`;\r\n    }\r\n  }\r\n\r\n  // Informaci√≥n adicional\r\n  releaseNotes += `---\\n\\n`;\r\n  releaseNotes += `**Total de commits:** ${commits.length}\\n`;\r\n  releaseNotes += `**Archivos afectados:** ${files.length}\\n`;\r\n  \r\n  if (pullRequest.user) {\r\n    releaseNotes += `**Autor:** @${pullRequest.user.login}\\n`;\r\n  }\r\n\r\n  return releaseNotes;\r\n}\r\n\r\nasync function run() {\r\n  try {\r\n    const token = core.getInput(\"github_token\");\r\n    const prNumberInput = core.getInput(\"pr_number\");\r\n    const octokit = github.getOctokit(token);\r\n    const context = github.context;\r\n\r\n    // Determinar el n√∫mero de PR a usar\r\n    let prNumber;\r\n    if (prNumberInput) {\r\n      prNumber = parseInt(prNumberInput);\r\n      console.log(`Usando PR n√∫mero proporcionado: ${prNumber}`);\r\n    } else if (context.payload.pull_request) {\r\n      prNumber = context.payload.pull_request.number;\r\n      console.log(`Usando PR n√∫mero del evento: ${prNumber}`);\r\n    } else {\r\n      throw new Error(\r\n        \"No se pudo determinar el n√∫mero de PR. Proporciona pr_number como input o ejecuta desde un evento de PR.\"\r\n      );\r\n    }\r\n\r\n    // Obtener informaci√≥n del PR\r\n    const { data: pullRequest } = await octokit.rest.pulls.get({\r\n      owner: context.repo.owner,\r\n      repo: context.repo.repo,\r\n      pull_number: prNumber,\r\n    });\r\n\r\n    // Obtener commits del PR\r\n    const { data: commits } = await octokit.rest.pulls.listCommits({\r\n      owner: context.repo.owner,\r\n      repo: context.repo.repo,\r\n      pull_number: prNumber,\r\n    });\r\n\r\n    // Obtener archivos modificados\r\n    const { data: files } = await octokit.rest.pulls.listFiles({\r\n      owner: context.repo.owner,\r\n      repo: context.repo.repo,\r\n      pull_number: prNumber,\r\n    });\r\n\r\n    // Obtener diff del PR\r\n    const { data: diff } = await octokit.rest.pulls.get({\r\n      owner: context.repo.owner,\r\n      repo: context.repo.repo,\r\n      pull_number: prNumber,\r\n      mediaType: {\r\n        format: \"diff\",\r\n      },\r\n    });\r\n\r\n    // Preparar informaci√≥n para GitHub Copilot\r\n    const commitMessages = commits\r\n      .map((c) => `- ${c.commit.message}`)\r\n      .join(\"\\n\");\r\n    const filesList = files\r\n      .map((f) => `- ${f.filename} (${f.status})`)\r\n      .join(\"\\n\");\r\n\r\n    const prompt = `Bas√°ndote en la siguiente informaci√≥n de un Pull Request, genera release notes profesionales en espa√±ol:\r\n\r\nT√çTULO DEL PR: ${pullRequest.title}\r\nDESCRIPCI√ìN DEL PR: ${pullRequest.body || \"Sin descripci√≥n\"}\r\n\r\nCOMMITS:\r\n${commitMessages}\r\n\r\nARCHIVOS MODIFICADOS:\r\n${filesList}\r\n\r\nDIFF DE CAMBIOS:\r\n${\r\n  diff.length > 3000\r\n    ? diff.substring(0, 3000) + \"\\n...[diff truncado]...\"\r\n    : diff\r\n}\r\n\r\nPor favor, genera release notes que incluyan:\r\n1. Un resumen de los cambios principales\r\n2. Nuevas caracter√≠sticas agregadas\r\n3. Correcciones de bugs\r\n4. Mejoras de rendimiento (si aplica)\r\n5. Cambios que podr√≠an afectar a los usuarios\r\n\r\nFormato la respuesta de manera profesional y clara.`;\r\n\r\n    // Generar release notes autom√°ticas sin IA\r\n    const releaseNotes = generateReleaseNotes(pullRequest, commits, files);\r\n\r\n    // Determinar el tag a usar\r\n    const customVersion = core.getInput(\"version\");\r\n    let tagName;\r\n\r\n    if (customVersion) {\r\n      // Usar versi√≥n personalizada\r\n      tagName = customVersion.startsWith(\"v\")\r\n        ? customVersion\r\n        : `v${customVersion}`;\r\n      console.log(`Usando versi√≥n personalizada: ${tagName}`);\r\n    } else {\r\n      // Generar tag basado en la fecha y hora actual\r\n      const now = new Date();\r\n      tagName = `v${now.getFullYear()}.${(now.getMonth() + 1)\r\n        .toString()\r\n        .padStart(2, \"0\")}.${now.getDate().toString().padStart(2, \"0\")}-${now\r\n        .getHours()\r\n        .toString()\r\n        .padStart(2, \"0\")}${now.getMinutes().toString().padStart(2, \"0\")}`;\r\n      console.log(`Generando tag autom√°tico: ${tagName}`);\r\n    }\r\n\r\n    // Crear la release\r\n    const release = await octokit.rest.repos.createRelease({\r\n      owner: context.repo.owner,\r\n      repo: context.repo.repo,\r\n      tag_name: tagName,\r\n      name: `Release ${tagName}`,\r\n      body: releaseNotes,\r\n      draft: false,\r\n      prerelease: false,\r\n    });\r\n\r\n    console.log(`Release creada exitosamente: ${release.data.html_url}`);\r\n    core.setOutput(\"release_url\", release.data.html_url);\r\n    core.setOutput(\"tag_name\", tagName);\r\n  } catch (error) {\r\n    console.error(\"Error:\", error);\r\n    core.setFailed(error.message);\r\n  }\r\n}\r\n\r\nrun();\r\n"],"names":[],"sourceRoot":""}